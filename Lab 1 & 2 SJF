def sjf(processes):
    n = len(processes)
    processes.sort(key=lambda x: x[1])  # Sort processes based on burst time
    waiting_time = [0] * n
    turnaround_time = [0] * n
    total_waiting_time = 0
    total_turnaround_time = 0

    # Calculate waiting time cumulatively
    for i in range(1, n):
        waiting_time[i] = waiting_time[i - 1] + processes[i - 1][1]
        total_waiting_time += waiting_time[i]

    # Calculate turnaround time based on waiting time
    for i in range(n):
        turnaround_time[i] = waiting_time[i] + processes[i][1]
        total_turnaround_time += turnaround_time[i]

    # Print table
    print("\nPROCESS \tBURST TIME \tWAITING TIME \tTURNAROUND TIME")
    for i in range(n):
        print(f"{processes[i][0]} \t\t{processes[i][1]} \t\t{waiting_time[i]} \t\t{turnaround_time[i]}")

    # Calculate average waiting time and turnaround time
    avg_waiting_time = total_waiting_time / n
    avg_turnaround_time = total_turnaround_time / n
    print(f"\nAverage Waiting Time: {avg_waiting_time}")
    print(f"Average Turnaround Time: {avg_turnaround_time}")


if __name__ == "__main__":
    processes = []
    n = int(input("Enter the number of processes: "))
    for i in range(n):
        burst_time = int(input(f"Enter Burst Time for Process {i + 1}: "))
        processes.append((i + 1, burst_time))

    sjf(processes)
